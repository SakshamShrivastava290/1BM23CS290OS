#include <stdio.h>

#define MAX 10


struct Process {
    int id;         
    int arrival;    
    int burst;      
    int start;      
    int finish;     
    int turnaround; 
    int waiting;    
};


void FCFS(struct Process p[], int n) {
    double ttat = 0;
    double twt = 0;
    int i;
    p[0].start = p[0].arrival; 
    p[0].finish = p[0].start + p[0].burst;
    p[0].turnaround = p[0].finish - p[0].arrival;
    p[0].waiting = p[0].turnaround - p[0].burst;
    ttat = ttat + p[0].turnaround;
    twt = twt + p[0].waiting;
    
    
    for (i = 1; i < n; i++) {
        p[i].start = p[i - 1].finish;
        p[i].finish = p[i].start + p[i].burst;
        p[i].turnaround = p[i].finish - p[i].arrival;
        p[i].waiting = p[i].turnaround - p[i].burst;
    
        twt = twt + p[i].waiting;
        ttat = ttat + p[i].turnaround;
    }
    
    printf("avg turnaround time : %f",ttat/n);
    printf("\n avg waiting time : %f",twt/n);
}



void SJF(struct Process p[], int n) {
    int i, j;
    double ttat = 0;
    double twt = 0;
    struct Process temp;
   
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (p[i].burst > p[j].burst) {
               
                temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }

    p[0].start = p[0].arrival;
    p[0].finish = p[0].start + p[0].burst;
    p[0].turnaround = p[0].finish - p[0].arrival;
    p[0].waiting = p[0].turnaround - p[0].burst;
    ttat = ttat + p[0].turnaround;
    twt = twt + p[0].waiting;

    
    for (i = 1; i < n; i++) {
        p[i].start = p[i - 1].finish;
        p[i].finish = p[i].start + p[i].burst;
        p[i].turnaround = p[i].finish - p[i].arrival;
        p[i].waiting = p[i].turnaround - p[i].burst;
        twt = twt + p[i].waiting;
        ttat = ttat + p[i].turnaround;
    }
    printf("avg turnaround time : %f",ttat/n);
    printf("\n avg waiting time : %f",twt/n);
}


void printProcesses(struct Process p[], int n) {
    printf("\nProcessID Arrival Burst Start Finish Turnaround Waiting\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\n", p[i].id, p[i].arrival, p[i].burst, p[i].start, p[i].finish, p[i].turnaround, p[i].waiting);
    }
}

int main() {
    int n, i;
    struct Process p[MAX];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

   
    for (i = 0; i < n; i++) {
        p[i].id = i + 1;
        printf("\nEnter arrival time and burst time for process %d: ", p[i].id);
        scanf("%d %d", &p[i].arrival, &p[i].burst);
    }


    printf("\nFCFS Scheduling:\n");
    FCFS(p, n);
    printProcesses(p, n);

   
    printf("\nSJF Scheduling (Non-Preemptive):\n");
    SJF(p, n);
    printProcesses(p, n);

    return 0;
}
